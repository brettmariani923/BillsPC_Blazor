@page "/search-pokemon"
@using BillsPC.Shared.Models
@using BillsPC.Repos
@using BillsPC.Services
@inject IPokemonRepo Repo
@inject PokeApiService PokeApiService


<h3 class="text-center mt-4 mb-4"><strong>Search Pokémon</strong></h3>

<!-- Styled container -->
<div class="d-flex justify-content-center">
    <div class="p-4" style="border: 2px solid red; border-radius: 10px; width: 100%; max-width: 600px;">
        <div class="mb-3">
            <input @bind="pokemonName" placeholder="Enter name" class="form-control" />
        </div>

        <div class="d-flex gap-2">
            <button class="btn btn-primary" @onclick="Search">Search</button>
            <button class="btn btn-secondary" @onclick="GetAll">Search All Pokémon</button>
        </div>
    </div>
</div>

@if (answer?.Count > 0)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Image</th>
                <th>PokemonID</th>
                <th>Name</th>
                <th>HP</th>
                <th>Attack</th>
                <th>Defense</th>
                <th>Speed</th>
                <th>SpecialAttack</th>
                <th>SpecialDefense</th>
                <th>Ability</th>
                <th>Legendary</th>
                <th>Region</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in answer)
            {
                <tr>
                    <td>
                        @if (imageUrls.TryGetValue(p.Name.ToLower(), out var url))
                        {
                            <img src="@url" alt="@p.Name" width="60" height="60" />
                        }
                        else
                        {
                            <span>Loading...</span>
                        }
                    </td>
                    <td>@p.PokemonID</td>
                    <td>@p.Name</td>
                    <td>@p.HP</td>
                    <td>@p.Attack</td>
                    <td>@p.Defense</td>
                    <td>@p.Speed</td>
                    <td>@p.SpecialAttack</td>
                    <td>@p.SpecialDefense</td>
                    <td>@p.Ability</td>
                    <td>@(p.Legendary ? "Yes" : "No")</td>
                    <td>@p.Region</td>
                </tr>
            }
        </tbody>

    </table>
}
else if (answer != null)
{
    <p>No Pokémon found matching your search.</p>
}

@code {
    public string pokemonName = string.Empty;
    public List<PokemonInfo> answer;
    private Dictionary<string, string> imageUrls = new();

    public async Task Search()
    {
        imageUrls.Clear();

        if (string.IsNullOrWhiteSpace(pokemonName))
        {
            answer = new List<PokemonInfo>();
            return;
        }

        answer = await Repo.ReturnPokemonLikeAsync(pokemonName);

        foreach (var p in answer)
        {
            var url = await PokeApiService.GetPokemonImageUrlAsync(p.Name);
            if (url != null)
                imageUrls[p.Name.ToLower()] = url;
        }
    }

    public async Task GetAll()
    {
        imageUrls.Clear();
        answer = await Repo.GetAllPokemonInfoAsync();

        foreach (var p in answer)
        {
            var url = await PokeApiService.GetPokemonImageUrlAsync(p.Name);
            if (url != null)
                imageUrls[p.Name.ToLower()] = url;
        }
    }
}

